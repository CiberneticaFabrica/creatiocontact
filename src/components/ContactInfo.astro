---
// Componente para mostrar informaci√≥n de contacto desde Creatio CRM
import type { CreatioContactResponse, CreatioContactRequest } from '../types/creatio';

export interface Props {
  contactId?: string;
  includePhoto?: boolean;
  editable?: boolean;
}

const { contactId = "60d45129-99d1-44a9-8c74-1d0b924795f4", includePhoto = true, editable = true } = Astro.props;

// Funci√≥n para obtener datos del contacto
async function getContactInfo(contactId: string, includePhoto: boolean): Promise<CreatioContactResponse | null> {
  try {
    const requestBody: CreatioContactRequest = {
      contact_id: contactId,
      include_photo: includePhoto
    };

    const response = await fetch('https://h9hl7f2ijf.execute-api.us-east-1.amazonaws.com/dev/Contact', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: CreatioContactResponse = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching contact info:', error);
    return null;
  }
}

// Obtener datos del contacto
let contactData = null;
let isLoading = true;
let error = null;

try {
  contactData = await getContactInfo(contactId, includePhoto);
  isLoading = false;
} catch (err) {
  error = err;
  isLoading = false;
}
---

<div class="contact-info-container">
  {isLoading ? (
    <div class="loading-state">
      <div class="loading-spinner"></div>
      <h3>Cargando informaci√≥n del contacto...</h3>
      <p>Por favor espera mientras obtenemos los datos del CRM Creatio.</p>
    </div>
  ) : error ? (
    <div class="error-state">
      <div class="error-icon">‚ö†Ô∏è</div>
      <h3>Error al cargar la informaci√≥n del contacto</h3>
      <p>Hubo un error al obtener los datos del contacto: {error.message}</p>
    </div>
  ) : (contactData && contactData.success) ? (
    <div class="contact-card">
      <!-- Header con foto y nombre -->
      <div class="contact-header">
        <div class="contact-avatar">
          {contactData.photo ? (
            <img src={contactData.photo} alt="Contact Photo" class="avatar-image" />
          ) : (
            <div class="avatar-placeholder">
              {contactData.data.GivenName?.charAt(0) || '?'}
              {contactData.data.Surname?.charAt(0) || ''}
            </div>
          )}
        </div>
        <div class="contact-basic-info">
          <h2 class="contact-name">
            {contactData.data.GivenName} {contactData.data.MiddleName} {contactData.data.Surname}
          </h2>
          <p class="contact-title">{contactData.data.JobTitle}</p>
          <div class="contact-status">
            <span class={`status-badge ${contactData.data.Confirmed ? 'confirmed' : 'pending'}`}>
              {contactData.data.Confirmed ? '‚úì Confirmed' : '‚è≥ Pending'}
            </span>
            <span class="completeness">Completeness: {contactData.data.Completeness}%</span>
          </div>
        </div>
      </div>

      <!-- Pesta√±as para organizar la informaci√≥n -->
      <div class="tabs-container">
        <div class="tabs-nav">
          <button type="button" class="tab-btn active" data-tab="personal">Informaci√≥n Personal</button>
          <button type="button" class="tab-btn" data-tab="professional">Informaci√≥n Profesional</button>
          <button type="button" class="tab-btn" data-tab="financial">Informaci√≥n Financiera</button>
          <button type="button" class="tab-btn" data-tab="family">Informaci√≥n Familiar</button>
        </div>

        <!-- Tab Personal -->
        <div class="tab-content active" id="tab-personal">
          <div class="contact-details">
            <div class="detail-section">
              <h3>Informaci√≥n de Contacto</h3>
              <div class="detail-grid">
                <div class="detail-item">
                  <span class="detail-label">üìß Email:</span>
                  {editable ? (
                    <input type="email" class="editable-field" value={contactData.data.Email} data-field="Email" />
                  ) : (
                    <span class="detail-value">{contactData.data.Email}</span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">üì± Mobile:</span>
                  {editable ? (
                    <input type="tel" class="editable-field" value={contactData.data.MobilePhone || ''} data-field="MobilePhone" placeholder="Enter mobile phone" />
                  ) : (
                    <span class="detail-value">{contactData.data.MobilePhone || 'Not provided'}</span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">‚òéÔ∏è Phone:</span>
                  {editable ? (
                    <input type="tel" class="editable-field" value={contactData.data.Phone || ''} data-field="Phone" placeholder="Enter phone number" />
                  ) : (
                    <span class="detail-value">{contactData.data.Phone || 'Not provided'}</span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">üè† Address:</span>
                  {editable ? (
                    <input type="text" class="editable-field" value={contactData.data.Address || ''} data-field="Address" placeholder="Enter address" />
                  ) : (
                    <span class="detail-value">{contactData.data.Address || 'Not provided'}</span>
                  )}
                </div>
              </div>
            </div>

            <div class="detail-section">
              <h3>Informaci√≥n Personal Detallada</h3>
              <div class="detail-grid">
                <div class="detail-item">
                  <span class="detail-label">üë§ Edad:</span>
                  {editable ? (
                    <input type="number" class="editable-field" value={contactData.data.Age || ''} data-field="Age" placeholder="Enter age" min="0" max="120" />
                  ) : (
                    <span class="detail-value">{contactData.data.Age || 'Not specified'}</span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">üéÇ Fecha de nacimiento:</span>
                  {editable ? (
                    <input type="date" class="editable-field" value={contactData.data.BirthDate ? contactData.data.BirthDate.split('T')[0] : ''} data-field="BirthDate" />
                  ) : (
                    <span class="detail-value">
                      {contactData.data.BirthDate ? new Date(contactData.data.BirthDate).toLocaleDateString() : 'Not provided'}
                    </span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">üë´ G√©nero:</span>
                  {editable ? (
                    <select class="editable-field" data-field="GenderId">
                      <option value="">Seleccionar g√©nero</option>
                      <option value="eeac42ee-65b6-df11-831a-001d60e938c6" selected={contactData.data.GenderId === 'eeac42ee-65b6-df11-831a-001d60e938c6'}>Masculino</option>
                      <option value="fc2483f8-65b6-df11-831a-001d60e938c6" selected={contactData.data.GenderId === 'fc2483f8-65b6-df11-831a-001d60e938c6'}>Femenino</option>
                    </select>
                  ) : (
                    <span class="detail-value">
                      {contactData.data.GenderId === 'eeac42ee-65b6-df11-831a-001d60e938c6' ? 'Masculino' : 
                       contactData.data.GenderId === 'fc2483f8-65b6-df11-831a-001d60e938c6' ? 'Femenino' : 'Not specified'}
                    </span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">üíç Estado civil:</span>
                  {editable ? (
                    <select class="editable-field" data-field="MaritalStatusId">
                      <option value="">Seleccionar estado civil</option>
                      <option value="81745fc0-0335-4a57-b32d-10780f729764" selected={contactData.data.MaritalStatusId === '81745fc0-0335-4a57-b32d-10780f729764'}>Uni√≥n civil/pareja de hecho</option>
                      <option value="6e2c607c-c521-455e-bc40-1246309ee232" selected={contactData.data.MaritalStatusId === '6e2c607c-c521-455e-bc40-1246309ee232'}>Soltero</option>
                      <option value="e09ad1f2-57bc-43cc-bdfc-188d4bfcc27a" selected={contactData.data.MaritalStatusId === 'e09ad1f2-57bc-43cc-bdfc-188d4bfcc27a'}>Casado</option>
                      <option value="16a0fb80-0ffa-4f0a-b9be-3acf2f27ecb6" selected={contactData.data.MaritalStatusId === '16a0fb80-0ffa-4f0a-b9be-3acf2f27ecb6'}>Divorciado</option>
                      <option value="a3e32b18-036f-4b40-b51e-5254fcdc15af" selected={contactData.data.MaritalStatusId === 'a3e32b18-036f-4b40-b51e-5254fcdc15af'}>Viudo</option>
                    </select>
                  ) : (
                    <span class="detail-value">
                      {contactData.data.MaritalStatusId === '81745fc0-0335-4a57-b32d-10780f729764' ? 'Uni√≥n civil/pareja de hecho' :
                       contactData.data.MaritalStatusId === '6e2c607c-c521-455e-bc40-1246309ee232' ? 'Soltero' :
                       contactData.data.MaritalStatusId === 'e09ad1f2-57bc-43cc-bdfc-188d4bfcc27a' ? 'Casado' :
                       contactData.data.MaritalStatusId === '16a0fb80-0ffa-4f0a-b9be-3acf2f27ecb6' ? 'Divorciado' :
                       contactData.data.MaritalStatusId === 'a3e32b18-036f-4b40-b51e-5254fcdc15af' ? 'Viudo' : 'Not specified'}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Tab Profesional -->
        <div class="tab-content" id="tab-professional">
          <div class="contact-details">
            <div class="detail-section">
              <h3>Informaci√≥n Profesional</h3>
              <div class="detail-grid">
                <div class="detail-item">
                  <span class="detail-label">üè¢ Departamento:</span>
                  {editable ? (
                    <select class="editable-field" data-field="DepartmentId">
                      <option value="">Seleccionar departamento</option>
                      <option value="9b90c192-60e6-df11-971b-001d60e938c6" selected={contactData.data.DepartmentId === '9b90c192-60e6-df11-971b-001d60e938c6'}>Desarrollo</option>
                      <option value="2076c4b6-7fe6-df11-971b-001d60e938c6" selected={contactData.data.DepartmentId === '2076c4b6-7fe6-df11-971b-001d60e938c6'}>Ventas</option>
                      <option value="66ffa487-b4da-df11-9b2a-001d60e938c6" selected={contactData.data.DepartmentId === '66ffa487-b4da-df11-9b2a-001d60e938c6'}>Administraci√≥n</option>
                    </select>
                  ) : (
                    <span class="detail-value">
                      {contactData.data.DepartmentId === '9b90c192-60e6-df11-971b-001d60e938c6' ? 'Desarrollo' :
                       contactData.data.DepartmentId === '2076c4b6-7fe6-df11-971b-001d60e938c6' ? 'Ventas' :
                       contactData.data.DepartmentId === '66ffa487-b4da-df11-9b2a-001d60e938c6' ? 'Administraci√≥n' : 'Not specified'}
                    </span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">üéì Tipo de educaci√≥n:</span>
                  {editable ? (
                    <select class="editable-field" data-field="EducationId">
                      <option value="">Seleccionar educaci√≥n</option>
                      <option value="9d0a8a05-caae-4cf6-b908-1fca85cea1d2" selected={contactData.data.EducationId === '9d0a8a05-caae-4cf6-b908-1fca85cea1d2'}>Doctorado</option>
                      <option value="a91d8067-80a1-4bca-9cfe-28d7aeb44a69" selected={contactData.data.EducationId === 'a91d8067-80a1-4bca-9cfe-28d7aeb44a69'}>Universidad</option>
                      <option value="aeeb4d34-d95d-4b83-b282-26f14868a578" selected={contactData.data.EducationId === 'aeeb4d34-d95d-4b83-b282-26f14868a578'}>Secundario</option>
                    </select>
                  ) : (
                    <span class="detail-value">
                      {contactData.data.EducationId === '9d0a8a05-caae-4cf6-b908-1fca85cea1d2' ? 'Doctorado' :
                       contactData.data.EducationId === 'aeeb4d34-d95d-4b83-b282-26f14868a578' ? 'Secundario' :
                       contactData.data.EducationId === 'a91d8067-80a1-4bca-9cfe-28d7aeb44a69' ? 'Universidad' : 'Not specified'}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Tab Financiera -->
        <div class="tab-content" id="tab-financial">
          <div class="contact-details">
            <div class="detail-section">
              <h3>Informaci√≥n Financiera</h3>
              <div class="detail-grid">
                <div class="detail-item">
                  <span class="detail-label">üí≥ Credit Score:</span>
                  {editable ? (
                    <input type="number" class="editable-field" value={contactData.data.labCredScore || ''} data-field="labCredScore" placeholder="Enter credit score" min="300" max="850" />
                  ) : (
                    <span class="detail-value">{contactData.data.labCredScore || 'Not provided'}</span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">üí∞ Ingresos mensuales:</span>
                  {editable ? (
                    <input type="number" class="editable-field" value={contactData.data.labMonthlyInc || ''} data-field="labMonthlyInc" placeholder="Enter monthly income" min="0" step="0.01" />
                  ) : (
                    <span class="detail-value">
                      {contactData.data.labMonthlyInc ? `$${contactData.data.labMonthlyInc.toLocaleString()}` : 'Not provided'}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Tab Familiar -->
        <div class="tab-content" id="tab-family">
          <div class="contact-details">
            <div class="detail-section">
              <h3>Informaci√≥n Familiar</h3>
              <div class="detail-grid">
                <div class="detail-item">
                  <span class="detail-label">üë• N√∫mero de dependientes:</span>
                  {editable ? (
                    <input type="number" class="editable-field" value={contactData.data.NumberOfFamilyMembers || '0'} data-field="NumberOfFamilyMembers" placeholder="0" min="0" />
                  ) : (
                    <span class="detail-value">{contactData.data.NumberOfFamilyMembers || '0'}</span>
                  )}
                </div>
                <div class="detail-item">
                  <span class="detail-label">üë∂ N√∫mero de hijos:</span>
                  {editable ? (
                    <input type="number" class="editable-field" value={contactData.data.NumberOfChildren || '0'} data-field="NumberOfChildren" placeholder="0" min="0" />
                  ) : (
                    <span class="detail-value">{contactData.data.NumberOfChildren || '0'}</span>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Botones de acci√≥n si es editable -->
      {editable && (
        <div class="action-buttons">
          <button type="button" class="btn btn-secondary" id="cancelBtn">
            Cancelar
          </button>
          <button type="button" class="btn btn-primary" id="saveBtn">
            Guardar Cambios
          </button>
        </div>
      )}
    </div>
  ) : (
    <div class="error-state">
      <div class="error-icon">‚ö†Ô∏è</div>
      <h3>No se pudo cargar la informaci√≥n del contacto</h3>
      <p>Hubo un error al obtener los datos del contacto. Por favor intenta de nuevo m√°s tarde.</p>
    </div>
  )}
</div>

<style>
  .contact-info-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .contact-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .contact-header {
    background: linear-gradient(135deg, #3b82f6 0%, #1e40af 50%, #1e3a8a 100%);
    color: white;
    padding: 30px;
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .contact-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    overflow: hidden;
    border: 3px solid rgba(255, 255, 255, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(147, 197, 253, 0.2);
  }

  .avatar-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .avatar-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #93c5fd 0%, #3b82f6 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    font-weight: bold;
    color: white;
  }

  .contact-basic-info {
    flex: 1;
  }

  .contact-name {
    margin: 0 0 8px 0;
    font-size: 28px;
    font-weight: 700;
    color: white;
  }

  .contact-title {
    margin: 0 0 12px 0;
    font-size: 16px;
    opacity: 0.95;
    color: #e0f2fe;
  }

  .contact-status {
    display: flex;
    gap: 15px;
    align-items: center;
  }

  .status-badge {
    padding: 6px 14px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
  }

  .status-badge.confirmed {
    background: rgba(34, 197, 94, 0.9);
    color: white;
  }

  .status-badge.pending {
    background: rgba(251, 191, 36, 0.9);
    color: #1e3a8a;
  }

  .completeness {
    font-size: 14px;
    opacity: 0.9;
    color: #e0f2fe;
    background: rgba(255, 255, 255, 0.1);
    padding: 4px 12px;
    border-radius: 12px;
  }

  .contact-details {
    padding: 30px;
  }

  .detail-section {
    margin-bottom: 30px;
  }

  .detail-section h3 {
    color: #1e40af;
    margin: 0 0 20px 0;
    font-size: 18px;
    font-weight: 700;
    border-bottom: 3px solid #3b82f6;
    padding-bottom: 8px;
  }

  .detail-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 15px;
  }

  .detail-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .detail-label {
    font-weight: 500;
    color: #4a5568;
    min-width: 120px;
  }

  .detail-value {
    color: #2d3748;
    flex: 1;
  }

  .editable-field {
    width: 100%;
    padding: 8px 12px;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    font-size: 14px;
    background: white;
  }

  .editable-field:focus {
    outline: none;
    border-color: #8b5cf6;
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  .tabs-container {
    margin-top: 20px;
  }

  .tabs-nav {
    display: flex;
    border-bottom: 2px solid #e2e8f0;
    margin-bottom: 20px;
    background: white;
  }

  .tab-btn {
    padding: 12px 20px;
    border: none;
    background: transparent;
    color: #6c757d;
    font-weight: 500;
    cursor: pointer;
    border-bottom: 3px solid transparent;
    flex: 1;
    text-align: center;
  }

  .tab-btn:hover {
    color: #8b5cf6;
    background: #f8f7ff;
  }

  .tab-btn.active {
    color: #8b5cf6;
    border-bottom-color: #8b5cf6;
    background: #f8f7ff;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .action-buttons {
    display: flex;
    justify-content: center;
    gap: 15px;
    padding: 30px;
    background: #f8f9fa;
    border-top: 1px solid #e2e8f0;
  }

  .btn {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    font-size: 14px;
  }

  .btn-primary {
    background: #8b5cf6;
    color: white;
  }

  .btn-secondary {
    background: #e2e8f0;
    color: #4a5568;
  }

  .loading-state, .error-state {
    text-align: center;
    padding: 60px 20px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #e2e8f0;
    border-top: 4px solid #8b5cf6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<script>
  // Funcionalidad de pesta√±as
  function setupTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = button.dataset.tab;
        
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));
        
        button.classList.add('active');
        document.getElementById(`tab-${targetTab}`).classList.add('active');
      });
    });
  }

  // Funcionalidad de edici√≥n de contactos
  function setupContactEditing() {
    const editableFields = document.querySelectorAll('.editable-field');
    const saveBtn = document.getElementById('saveBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    
    let originalValues = {};
    
    // Obtener contactId de la URL
    function getContactIdFromUrl() {
      const pathParts = window.location.pathname.split('/');
      const contactDemoIndex = pathParts.indexOf('contact-demo');
      if (contactDemoIndex !== -1 && pathParts[contactDemoIndex + 1]) {
        return pathParts[contactDemoIndex + 1];
      }
      return null;
    }
    
    // Inicializar botones como ocultos
    if (saveBtn) saveBtn.style.display = 'none';
    if (cancelBtn) cancelBtn.style.display = 'none';
    
    // Guardar valores originales
    editableFields.forEach(field => {
      originalValues[field.dataset.field] = field.value;
      
      // Agregar listener para detectar cambios
      field.addEventListener('input', () => {
        const hasChanges = Object.keys(originalValues).some(key => {
          const field = document.querySelector(`[data-field="${key}"]`);
          return field && field.value !== originalValues[key];
        });
        
        // Mostrar/ocultar botones seg√∫n si hay cambios
        if (hasChanges) {
          if (saveBtn) saveBtn.style.display = 'block';
          if (cancelBtn) cancelBtn.style.display = 'block';
        } else {
          if (saveBtn) saveBtn.style.display = 'none';
          if (cancelBtn) cancelBtn.style.display = 'none';
        }
      });
    });
    
    // Bot√≥n de guardar
    if (saveBtn) {
      saveBtn.addEventListener('click', async () => {
        const updatedData = {};
        
        editableFields.forEach(field => {
          const value = field.value.trim();
          const fieldName = field.dataset.field;
          
          if (value !== '') {
            updatedData[fieldName] = value;
          }
        });
        
        // Mostrar estado de carga
        saveBtn.disabled = true;
        saveBtn.textContent = 'Guardando...';
        
        try {
          const contactId = getContactIdFromUrl();
          if (!contactId) {
            throw new Error('No se pudo obtener el ID del contacto de la URL');
          }
          
          // Validar que hay datos para actualizar
          if (Object.keys(updatedData).length === 0) {
            alert('No hay cambios para guardar');
            return;
          }
          
          console.log('Enviando datos a la API:', {
            contact_id: contactId,
            updates: updatedData
          });
          
          // Enviar datos a la API de actualizaci√≥n
          const response = await fetch('https://h9hl7f2ijf.execute-api.us-east-1.amazonaws.com/dev/Contact', {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              contact_id: contactId,
              updates: updatedData
            })
          });
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const result = await response.json();
          console.log('Respuesta de la API:', result);
          
          // Mostrar mensaje de √©xito
          alert('¬°Informaci√≥n del contacto actualizada exitosamente!');
          
          // Actualizar valores originales
          editableFields.forEach(field => {
            originalValues[field.dataset.field] = field.value;
          });
          
          // Ocultar botones
          if (saveBtn) saveBtn.style.display = 'none';
          if (cancelBtn) cancelBtn.style.display = 'none';
          
        } catch (error) {
          console.error('Error updating contact:', error);
          alert('Error al actualizar la informaci√≥n del contacto. Por favor intenta de nuevo.');
        } finally {
          // Restaurar bot√≥n
          saveBtn.disabled = false;
          saveBtn.textContent = 'Guardar Cambios';
        }
      });
    }
    
    // Bot√≥n de cancelar
    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        // Restaurar valores originales
        editableFields.forEach(field => {
          field.value = originalValues[field.dataset.field];
        });
        
        // Ocultar botones
        if (saveBtn) saveBtn.style.display = 'none';
        if (cancelBtn) cancelBtn.style.display = 'none';
      });
    }
  }

  // Inicializar funcionalidades
  document.addEventListener('DOMContentLoaded', () => {
    setupTabs();
    setupContactEditing();
  });
</script>