---
// Componente para mostrar informaci√≥n de contacto desde Creatio CRM
import type { CreatioContactResponse, CreatioContactRequest } from '../types/creatio';

export interface Props {
  contactId?: string;
  includePhoto?: boolean;
  editable?: boolean;
}

const { contactId = "60d45129-99d1-44a9-8c74-1d0b924795f4", includePhoto = true, editable = true } = Astro.props;

// Funci√≥n para obtener datos del contacto
async function getContactInfo(contactId: string, includePhoto: boolean): Promise<CreatioContactResponse | null> {
  try {
    const requestBody: CreatioContactRequest = {
      contact_id: contactId,
      include_photo: includePhoto
    };

    const response = await fetch('https://h9hl7f2ijf.execute-api.us-east-1.amazonaws.com/dev/Contact', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: CreatioContactResponse = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching contact info:', error);
    return null;
  }
}

// Obtener datos del contacto
let contactData = null;
let isLoading = true;
let error = null;

try {
  contactData = await getContactInfo(contactId, includePhoto);
  isLoading = false;
} catch (err) {
  error = err;
  isLoading = false;
}
---

<div class="contact-info-container">
  {isLoading ? (
    <div class="loading-state">
      <div class="loading-spinner"></div>
      <h3>Cargando informaci√≥n del contacto...</h3>
      <p>Por favor espera mientras obtenemos los datos del CRM Creatio.</p>
    </div>
  ) : error ? (
    <div class="error-state">
      <div class="error-icon">‚ö†Ô∏è</div>
      <h3>Error al cargar la informaci√≥n del contacto</h3>
      <p>Hubo un error al obtener los datos del contacto: {error.message}</p>
    </div>
  ) : contactData && contactData.success ? (
    <div class="contact-card">
      <!-- Header con foto y nombre -->
      <div class="contact-header">
        <div class="contact-avatar">
          {contactData.photo ? (
            <img src={contactData.photo} alt="Contact Photo" class="avatar-image" />
          ) : (
            <div class="avatar-placeholder">
              {contactData.data.GivenName?.charAt(0) || '?'}
              {contactData.data.Surname?.charAt(0) || ''}
            </div>
          )}
        </div>
        <div class="contact-basic-info">
          <h2 class="contact-name">
            {contactData.data.GivenName} {contactData.data.MiddleName} {contactData.data.Surname}
          </h2>
          <p class="contact-title">{contactData.data.JobTitle}</p>
          <div class="contact-status">
            <span class={`status-badge ${contactData.data.Confirmed ? 'confirmed' : 'pending'}`}>
              {contactData.data.Confirmed ? '‚úì Confirmed' : '‚è≥ Pending'}
            </span>
            <span class="completeness">Completeness: {contactData.data.Completeness}%</span>
          </div>
        </div>
      </div>

      <!-- Informaci√≥n de contacto -->
      <div class="contact-details">
        <div class="detail-section">
          <h3>Informaci√≥n de Contacto</h3>
          <div class="detail-grid">
            <div class="detail-item">
              <span class="detail-label">üìß Email:</span>
              {editable ? (
                <input type="email" class="editable-field" value={contactData.data.Email} data-field="Email" />
              ) : (
                <span class="detail-value">{contactData.data.Email}</span>
              )}
            </div>
            <div class="detail-item">
              <span class="detail-label">üì± Mobile:</span>
              {editable ? (
                <input type="tel" class="editable-field" value={contactData.data.MobilePhone || ''} data-field="MobilePhone" placeholder="Enter mobile phone" />
              ) : (
                <span class="detail-value">{contactData.data.MobilePhone || 'Not provided'}</span>
              )}
            </div>
            <div class="detail-item">
              <span class="detail-label">‚òéÔ∏è Phone:</span>
              {editable ? (
                <input type="tel" class="editable-field" value={contactData.data.Phone || ''} data-field="Phone" placeholder="Enter phone number" />
              ) : (
                <span class="detail-value">{contactData.data.Phone || 'Not provided'}</span>
              )}
            </div>
            <div class="detail-item">
              <span class="detail-label">üè† Address:</span>
              {editable ? (
                <input type="text" class="editable-field" value={contactData.data.Address || ''} data-field="Address" placeholder="Enter address" />
              ) : (
                <span class="detail-value">{contactData.data.Address || 'Not provided'}</span>
              )}
            </div>
            <div class="detail-item">
              <span class="detail-label">üíº Job Title:</span>
              {editable ? (
                <input type="text" class="editable-field" value={contactData.data.JobTitle || ''} data-field="JobTitle" placeholder="Enter job title" />
              ) : (
                <span class="detail-value">{contactData.data.JobTitle || 'Not specified'}</span>
              )}
            </div>
            <div class="detail-item">
              <span class="detail-label">üéÇ Birth Date:</span>
              {editable ? (
                <input type="date" class="editable-field" value={contactData.data.BirthDate ? contactData.data.BirthDate.split('T')[0] : ''} data-field="BirthDate" />
              ) : (
                <span class="detail-value">
                  {contactData.data.BirthDate ? new Date(contactData.data.BirthDate).toLocaleDateString() : 'Not provided'}
                </span>
              )}
            </div>
          </div>
        </div>

        <!-- Informaci√≥n adicional -->
        <div class="detail-section">
          <h3>Informaci√≥n Adicional</h3>
          <div class="detail-grid">
            <div class="detail-item">
              <span class="detail-label">üë§ Age:</span>
              <span class="detail-value">{contactData.data.Age || 'Not specified'}</span>
            </div>
            <div class="detail-item">
              <span class="detail-label">üìß Email Confirmed:</span>
              <span class="detail-value">
                <span class={`status-indicator ${contactData.data.IsEmailConfirmed ? 'confirmed' : 'not-confirmed'}`}>
                  {contactData.data.IsEmailConfirmed ? '‚úì Yes' : '‚úó No'}
                </span>
              </span>
            </div>
            <div class="detail-item">
              <span class="detail-label">üÜî ID Number:</span>
              <span class="detail-value">{contactData.data.labNumCedula || 'Not provided'}</span>
            </div>
            <div class="detail-item">
              <span class="detail-label">üìÖ ID Expiry:</span>
              <span class="detail-value">
                {contactData.data.labVencimientoCedula ? new Date(contactData.data.labVencimientoCedula).toLocaleDateString() : 'Not provided'}
              </span>
            </div>
          </div>
        </div>

        <!-- Preferencias de comunicaci√≥n -->
        <div class="detail-section">
          <h3>Preferencias de Comunicaci√≥n</h3>
          <div class="preferences-grid">
            <div class="preference-item">
              <span class="preference-label">üìß Email</span>
              <span class={`preference-status ${contactData.data.DoNotUseEmail ? 'disabled' : 'enabled'}`}>
                {contactData.data.DoNotUseEmail ? '‚úó Disabled' : '‚úì Enabled'}
              </span>
            </div>
            <div class="preference-item">
              <span class="preference-label">üìû Calls</span>
              <span class={`preference-status ${contactData.data.DoNotUseCall ? 'disabled' : 'enabled'}`}>
                {contactData.data.DoNotUseCall ? '‚úó Disabled' : '‚úì Enabled'}
              </span>
            </div>
            <div class="preference-item">
              <span class="preference-label">üì± SMS</span>
              <span class={`preference-status ${contactData.data.DoNotUseSms ? 'disabled' : 'enabled'}`}>
                {contactData.data.DoNotUseSms ? '‚úó Disabled' : '‚úì Enabled'}
              </span>
            </div>
            <div class="preference-item">
              <span class="preference-label">üì¨ Mail</span>
              <span class={`preference-status ${contactData.data.DoNotUseMail ? 'disabled' : 'enabled'}`}>
                {contactData.data.DoNotUseMail ? '‚úó Disabled' : '‚úì Enabled'}
              </span>
            </div>
          </div>
        </div>

        <!-- Redes sociales -->
        {(contactData.data.Skype || contactData.data.Facebook || contactData.data.LinkedIn || contactData.data.Twitter) && (
          <div class="detail-section">
            <h3>Redes Sociales</h3>
            <div class="social-links">
              {contactData.data.Skype && (
                <a href={`skype:${contactData.data.Skype}`} class="social-link skype">
                  üí¨ Skype: {contactData.data.Skype}
                </a>
              )}
              {contactData.data.Facebook && (
                <a href={contactData.data.Facebook} class="social-link facebook" target="_blank" rel="noopener noreferrer">
                  üìò Facebook
                </a>
              )}
              {contactData.data.LinkedIn && (
                <a href={contactData.data.LinkedIn} class="social-link linkedin" target="_blank" rel="noopener noreferrer">
                  üíº LinkedIn
                </a>
              )}
              {contactData.data.Twitter && (
                <a href={contactData.data.Twitter} class="social-link twitter" target="_blank" rel="noopener noreferrer">
                  üê¶ Twitter
                </a>
              )}
            </div>
          </div>
        )}

        <!-- Metadatos -->
        <div class="metadata">
          <p class="last-updated">
            √öltima actualizaci√≥n: {new Date(contactData.data.ModifiedOn).toLocaleString()}
          </p>
          <p class="fetched-at">
            Datos obtenidos: {new Date(contactData.fetched_at).toLocaleString()}
          </p>
        </div>
      </div>
      
      <!-- Botones de acci√≥n si es editable -->
      {editable && (
        <div class="action-buttons">
          <button type="button" class="btn btn-secondary" id="cancelBtn">
            Cancelar
          </button>
          <button type="button" class="btn btn-primary" id="saveBtn">
            Guardar Cambios
          </button>
        </div>
      )}
    </div>
  ) : (
    <div class="error-state">
      <div class="error-icon">‚ö†Ô∏è</div>
      <h3>No se pudo cargar la informaci√≥n del contacto</h3>
      <p>Hubo un error al obtener los datos del contacto. Por favor intenta de nuevo m√°s tarde.</p>
    </div>
  )}
</div>

<style>
  .contact-info-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .contact-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .contact-header {
    background: linear-gradient(135deg, #3b82f6 0%, #1e40af 50%, #1e3a8a 100%);
    color: white;
    padding: 30px;
    display: flex;
    align-items: center;
    gap: 20px;
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.3);
  }

  .contact-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    overflow: hidden;
    border: 3px solid rgba(255, 255, 255, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(147, 197, 253, 0.2);
    backdrop-filter: blur(10px);
  }

  .avatar-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .avatar-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #93c5fd 0%, #3b82f6 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    font-weight: bold;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .contact-basic-info {
    flex: 1;
  }

  .contact-name {
    margin: 0 0 8px 0;
    font-size: 28px;
    font-weight: 700;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    letter-spacing: -0.5px;
  }

  .contact-title {
    margin: 0 0 12px 0;
    font-size: 16px;
    opacity: 0.95;
    color: #e0f2fe;
    font-weight: 500;
  }

  .contact-status {
    display: flex;
    gap: 15px;
    align-items: center;
  }

  .status-badge {
    padding: 6px 14px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-badge.confirmed {
    background: rgba(34, 197, 94, 0.9);
    color: white;
    box-shadow: 0 2px 8px rgba(34, 197, 94, 0.3);
  }

  .status-badge.pending {
    background: rgba(251, 191, 36, 0.9);
    color: #1e3a8a;
    box-shadow: 0 2px 8px rgba(251, 191, 36, 0.3);
  }

  .completeness {
    font-size: 14px;
    opacity: 0.9;
    color: #e0f2fe;
    font-weight: 500;
    background: rgba(255, 255, 255, 0.1);
    padding: 4px 12px;
    border-radius: 12px;
    backdrop-filter: blur(10px);
  }

  .contact-details {
    padding: 30px;
  }

  .detail-section {
    margin-bottom: 30px;
  }

  .detail-section:last-child {
    margin-bottom: 0;
  }

  .detail-section h3 {
    color: #1e40af;
    margin: 0 0 20px 0;
    font-size: 18px;
    font-weight: 700;
    border-bottom: 3px solid #3b82f6;
    padding-bottom: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .detail-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 15px;
  }

  .detail-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .detail-label {
    font-weight: 500;
    color: #4a5568;
    min-width: 120px;
  }

  .detail-value {
    color: #2d3748;
    flex: 1;
  }

  .status-indicator {
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
  }

  .status-indicator.confirmed {
    background: #dcfce7;
    color: #166534;
  }

  .status-indicator.not-confirmed {
    background: #fef2f2;
    color: #dc2626;
  }

  .preferences-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
  }

  .preference-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .preference-label {
    font-weight: 500;
    color: #4a5568;
  }

  .preference-status {
    font-size: 12px;
    font-weight: 500;
    padding: 2px 8px;
    border-radius: 12px;
  }

  .preference-status.enabled {
    background: #dcfce7;
    color: #166534;
  }

  .preference-status.disabled {
    background: #fef2f2;
    color: #dc2626;
  }

  .social-links {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
  }

  .social-link {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: #f8f9fa;
    border-radius: 20px;
    text-decoration: none;
    color: #4a5568;
    font-size: 14px;
    transition: all 0.3s ease;
  }

  .social-link:hover {
    background: #e2e8f0;
    transform: translateY(-1px);
  }

  .social-link.skype:hover {
    background: #00aff0;
    color: white;
  }

  .social-link.facebook:hover {
    background: #1877f2;
    color: white;
  }

  .social-link.linkedin:hover {
    background: #0077b5;
    color: white;
  }

  .social-link.twitter:hover {
    background: #1da1f2;
    color: white;
  }

  .metadata {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid #e2e8f0;
    text-align: center;
  }

  .last-updated,
  .fetched-at {
    margin: 5px 0;
    font-size: 12px;
    color: #718096;
  }

  .error-state {
    text-align: center;
    padding: 60px 20px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .error-icon {
    font-size: 48px;
    margin-bottom: 20px;
  }

  .error-state h3 {
    color: #dc2626;
    margin: 0 0 10px 0;
  }

  .error-state p {
    color: #718096;
    margin: 0;
  }

  .loading-state {
    text-align: center;
    padding: 60px 20px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #e2e8f0;
    border-top: 4px solid #8b5cf6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-state h3 {
    color: #2d3748;
    margin: 0 0 10px 0;
  }

  .loading-state p {
    color: #718096;
    margin: 0;
  }

  /* Campos editables */
  .editable-field {
    width: 100%;
    padding: 8px 12px;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    font-size: 14px;
    background: white;
    transition: all 0.3s ease;
  }

  .editable-field:focus {
    outline: none;
    border-color: #8b5cf6;
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  .editable-field:hover {
    border-color: #cbd5e0;
  }

  /* Botones de acci√≥n */
  .action-buttons {
    display: flex;
    justify-content: center;
    gap: 15px;
    padding: 30px;
    background: #f8f9fa;
    border-top: 1px solid #e2e8f0;
  }

  .btn {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 14px;
  }

  .btn-primary {
    background: #8b5cf6;
    color: white;
  }

  .btn-primary:hover {
    background: #7c3aed;
    transform: translateY(-1px);
  }

  .btn-secondary {
    background: #e2e8f0;
    color: #4a5568;
  }

  .btn-secondary:hover {
    background: #cbd5e0;
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .btn:disabled:hover {
    transform: none;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .contact-info-container {
      padding: 10px;
    }

    .contact-header {
      flex-direction: column;
      text-align: center;
      padding: 20px;
    }

    .contact-avatar {
      width: 60px;
      height: 60px;
    }

    .contact-name {
      font-size: 24px;
    }

    .contact-details {
      padding: 20px;
    }

    .detail-grid {
      grid-template-columns: 1fr;
    }

    .preferences-grid {
      grid-template-columns: 1fr;
    }

    .social-links {
      justify-content: center;
    }
  }
</style>

<script>
  // Funcionalidad de edici√≥n de contactos
  if (document.querySelector('.editable-field')) {
    const editableFields = document.querySelectorAll('.editable-field');
    const saveBtn = document.getElementById('saveBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    
    let originalValues = {};
    
    // Obtener contactId de la URL de manera m√°s robusta
    function getContactIdFromUrl() {
      const pathParts = window.location.pathname.split('/');
      const contactDemoIndex = pathParts.indexOf('contact-demo');
      if (contactDemoIndex !== -1 && pathParts[contactDemoIndex + 1]) {
        return pathParts[contactDemoIndex + 1];
      }
      return null;
    }
    
    // Funciones de validaci√≥n
    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
    
    function isValidPhone(phone) {
      // Acepta n√∫meros con +, -, espacios y par√©ntesis
      const phoneRegex = /^[\+]?[0-9\s\-\(\)]{7,15}$/;
      return phoneRegex.test(phone);
    }
    
    function isValidDate(dateString) {
      const date = new Date(dateString);
      return date instanceof Date && !isNaN(date) && dateString !== '';
    }
    
    // Inicializar botones como ocultos
    if (saveBtn) saveBtn.style.display = 'none';
    if (cancelBtn) cancelBtn.style.display = 'none';
    
    // Guardar valores originales
    editableFields.forEach(field => {
      originalValues[field.dataset.field] = field.value;
      
      // Agregar listener para detectar cambios
      field.addEventListener('input', () => {
        const hasChanges = Object.keys(originalValues).some(key => {
          const field = document.querySelector(`[data-field="${key}"]`);
          return field && field.value !== originalValues[key];
        });
        
        // Mostrar/ocultar botones seg√∫n si hay cambios
        if (hasChanges) {
          if (saveBtn) saveBtn.style.display = 'block';
          if (cancelBtn) cancelBtn.style.display = 'block';
        } else {
          if (saveBtn) saveBtn.style.display = 'none';
          if (cancelBtn) cancelBtn.style.display = 'none';
        }
      });
    });
    
    // Bot√≥n de guardar
    if (saveBtn) {
      saveBtn.addEventListener('click', async () => {
        const updatedData = {};
        const validationErrors = [];
        
        editableFields.forEach(field => {
          const value = field.value.trim();
          const fieldName = field.dataset.field;
          
          // Validaciones espec√≠ficas
          if (value !== '') {
            if (fieldName === 'Email' && !isValidEmail(value)) {
              validationErrors.push('El email no tiene un formato v√°lido');
              return;
            }
            
            if ((fieldName === 'Phone' || fieldName === 'MobilePhone') && !isValidPhone(value)) {
              validationErrors.push('El n√∫mero de tel√©fono no tiene un formato v√°lido');
              return;
            }
            
            if (fieldName === 'BirthDate' && !isValidDate(value)) {
              validationErrors.push('La fecha de nacimiento no es v√°lida');
              return;
            }
            
            updatedData[fieldName] = value;
          }
        });
        
        // Mostrar errores de validaci√≥n si los hay
        if (validationErrors.length > 0) {
          alert('Errores de validaci√≥n:\n' + validationErrors.join('\n'));
          return;
        }
        
        // Mostrar estado de carga
        saveBtn.disabled = true;
        saveBtn.textContent = 'Guardando...';
        
        try {
          const contactId = getContactIdFromUrl();
          if (!contactId) {
            throw new Error('No se pudo obtener el ID del contacto de la URL');
          }
          
          // Validar que hay datos para actualizar
          if (Object.keys(updatedData).length === 0) {
            alert('No hay cambios para guardar');
            return;
          }
          
          // Enviar datos a la API de actualizaci√≥n
          const response = await fetch('https://h9hl7f2ijf.execute-api.us-east-1.amazonaws.com/dev/Contact', {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              contact_id: contactId,
              updates: updatedData
            })
          });
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const result = await response.json();
          console.log('Update response:', result);
          
          // Mostrar mensaje de √©xito
          alert('¬°Informaci√≥n del contacto actualizada exitosamente!');
          
          // Actualizar valores originales
          editableFields.forEach(field => {
            originalValues[field.dataset.field] = field.value;
          });
          
          // Recargar la p√°gina para mostrar los datos actualizados
          window.location.reload();
          
        } catch (error) {
          console.error('Error updating contact:', error);
          alert('Error al actualizar la informaci√≥n del contacto. Por favor intenta de nuevo.');
        } finally {
          // Restaurar bot√≥n
          saveBtn.disabled = false;
          saveBtn.textContent = 'Guardar Cambios';
        }
      });
    }
    
    // Bot√≥n de cancelar
    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        // Restaurar valores originales
        editableFields.forEach(field => {
          field.value = originalValues[field.dataset.field];
        });
      });
    }
  }
</script>
